tbl4 <- tbl4 %>%
mutate(type="Lean Republican")
tbl5 <- tables[[5]]
colnames(tbl5)[colnames(tbl5) == ""] <- "st_abbrv"
tbl5 <- tbl5 %>%
mutate(type="Republican")
actual_results2024 <- rbind(tbl1, tbl2, tbl3, tbl4, tbl5)
# colnames(actual_results2024)[colnames(actual_results2024) == ""] <- "st_abbrv"
actual_results2024_ <- actual_results2024 %>%
filter(!st_abbrv == "") %>%
mutate(st_abbrv2 = case_when(st_abbrv=="D.C." ~ "District Of Columbia",
st_abbrv == "Md." ~ "Maryland",
st_abbrv == "Neb." ~ "Nebraska",
st_abbrv == "N.C." ~ "North Carolina",
st_abbrv == "N.D." ~ "North Dakota",
st_abbrv == "N.H." ~ "New Hampshire",
st_abbrv == "N.J." ~ "New Jersey",
st_abbrv == "N.M." ~ "New Mexico",
st_abbrv == "N.Y." ~ "New York",
st_abbrv == "Nev." ~ "Nevada",
st_abbrv == "Va." ~ "Virginia",
st_abbrv == "Vt." ~ "Vermont",
st_abbrv == "W.Va." ~ "West Virginia",
st_abbrv == "Wash." ~ "Washington",
TRUE ~ st_abbrv)) %>%
arrange(st_abbrv2) %>%
mutate(State = ls_states,
Democrat = as.numeric(str_remove(Dem., "%"))/100,
Republican = as.numeric(str_remove(Rep., "%"))/100,
actual_2024 = if_else(Democrat>Republican, "Democratic Party","Republican Party")
)
act_res24_tbl <- actual_results2024_ %>%
select(c(State, Democrat, Republican, type, actual_2024))
act_vs_res <- left_join(act_res24_tbl, state_predictions, join_by(State==state)) %>%
mutate(correctly_predicted = actual_2024==prediction_2024)
act_vs_res %>%
kableExtra::kable() %>%
kableExtra::kable_minimal()
act_vs_res2 <- act_vs_res %>%
drop_na(prediction_2024) %>%
mutate(prediction_2024 = as.factor(prediction_2024),
actual_2024 = as.factor(actual_2024))
# Create confusion matrix
conf_matrix <- confusionMatrix(act_vs_res2$prediction_2024, act_vs_res2$actual_2024)
# Extract the confusion matrix table
cm_table <- as.data.frame(conf_matrix$table)
# Plot confusion matrix using ggplot2
ggplot(cm_table, aes(x = Prediction, y = Reference, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(label = Freq), vjust = 1) +
theme_minimal() +
labs(
title = "2024 Election results Confusion Matrix",
x = "Predicted",
y = "Actual"
)
#incorrect predictions
act_vs_res %>%
filter(correctly_predicted== FALSE)%>%
kableExtra::kable() %>%
kableExtra::kable_minimal()
#reorder variables based on MeanDecreaseGini to display in descending order
ImpData2$Var.Names2 <- factor(ImpData2$Var.Names, levels = ImpData2$Var.Names[order(ImpData2$MeanDecreaseGini, decreasing = FALSE)])
ggplot(ImpData2, aes(x=Var.Names2, y=MeanDecreaseGini)) +
geom_segment(aes(x=Var.Names2, xend=Var.Names2, y=0, yend=MeanDecreaseGini), color="skyblue") +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Variable importance
ImpData2 <- as.data.frame(importance(rf_model2))
ImpData2$Var.Names <- row.names(ImpData2)
#reorder variables based on MeanDecreaseAccuracy to display in descending order
ImpData2$Var.Names <- factor(ImpData2$Var.Names, levels = ImpData2$Var.Names[order(ImpData2$MeanDecreaseAccuracy, decreasing = FALSE)])
ggplot(ImpData2, aes(x=Var.Names, y=MeanDecreaseAccuracy)) +
geom_segment(aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDecreaseAccuracy), color="skyblue") +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90 )
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90,
number.cex=0.7,tl.cex=0.8)
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90,
number.cex=0.7,tl.cex=0.8)
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90,
number.cex=0.7,tl.cex=0.8)
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90,
number.cex=0.7,tl.cex=0.8)
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90,
number.cex=0.7,tl.cex=0.8)
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90,
number.cex=0.7,tl.cex=0.8)
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90,
number.cex=0.7,tl.cex=0.8)
cor_df <- vot_info_fin_pivot %>%
select(-c(state, starts_with("winning"))) %>%
keep(is.numeric)
cor_matrix <- cor(cor_df)
# Create a heatmap for the correlation matrix
# Visualize correlation between variables
corrplot.mixed(cor(cor_df %>% keep(is.numeric)),
tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="shade",
shade.col=NA, tl.srt=90,
number.cex=0.7,tl.cex=0.8)
# Histograms
vot_info_fin_pivot %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_density(fill = "#222222", alpha = 0.5, color = "darkgray") +
geom_histogram(aes(y=..density..), alpha=0.5, fill = "#222222", color="darkgray", position="identity") +
theme(axis.title = element_blank())
# Histograms
vot_info_fin_pivot %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_density(fill = "#222222", alpha = 0.5, color = "darkgray") +
geom_histogram(aes(y=..density..), alpha=0.5, fill = "#222222", color="darkgray", position="identity") +
theme(axis.title = element_blank())
# Histograms
vot_info_fin_pivot %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_density(fill = "#222222", alpha = 0.5, color = "darkgray") +
geom_histogram(aes(y=..density..), alpha=0.5, fill = "#222222", color="darkgray", position="identity") +
theme(axis.title = element_blank())
# Histograms
vot_info_fin_pivot %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_density(fill = "#222222", alpha = 0.5, color = "darkgray") +
geom_histogram(aes(y=..density..), alpha=0.5, fill = "#222222", color="darkgray", position="identity") +
theme(axis.title = element_blank())
# Histograms
vot_info_fin_pivot %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_density(fill = "#222222", alpha = 0.5, color = "darkgray") +
geom_histogram(aes(y=..density..), alpha=0.5, fill = "#222222", color="darkgray", position="identity") +
theme(axis.title = element_blank())
# Histograms
vot_info_fin_pivot %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_density(fill = "#222222", alpha = 0.5, color = "darkgray") +
geom_histogram(aes(y=..density..), alpha=0.5, fill = "#222222", color="darkgray", position="identity") +
theme(axis.title = element_blank())
# Variable importance
ImpData2 <- as.data.frame(importance(rf_model2))
ImpData2$Var.Names <- row.names(ImpData2)
#reorder variables based on MeanDecreaseAccuracy to display in descending order
ImpData2$Var.Names <- factor(ImpData2$Var.Names, levels = ImpData2$Var.Names[order(ImpData2$MeanDecreaseAccuracy, decreasing = FALSE)])
ggplot(ImpData2, aes(x=Var.Names, y=MeanDecreaseAccuracy)) +
geom_segment(aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDecreaseAccuracy), color="skyblue") +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
# theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Variable importance
ImpData2 <- as.data.frame(importance(rf_model2))
ImpData2$Var.Names <- row.names(ImpData2)
#reorder variables based on MeanDecreaseAccuracy to display in descending order
ImpData2$Var.Names <- factor(ImpData2$Var.Names, levels = ImpData2$Var.Names[order(ImpData2$MeanDecreaseAccuracy, decreasing = FALSE)])
ggplot(ImpData2, aes(x=Var.Names, y=MeanDecreaseAccuracy)) +
geom_segment(aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDecreaseAccuracy),
color="skyblue",
size = 2
) +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Variable importance
ImpData2 <- as.data.frame(importance(rf_model2))
ImpData2$Var.Names <- row.names(ImpData2)
#reorder variables based on MeanDecreaseAccuracy to display in descending order
ImpData2$Var.Names <- factor(ImpData2$Var.Names, levels = ImpData2$Var.Names[order(ImpData2$MeanDecreaseAccuracy, decreasing = FALSE)])
ggplot(ImpData2, aes(x=Var.Names, y=MeanDecreaseAccuracy)) +
geom_segment(aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDecreaseAccuracy),
color="skyblue",
size = 2
) +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Variable importance
ImpData2 <- as.data.frame(importance(rf_model2))
ImpData2$Var.Names <- row.names(ImpData2)
#reorder variables based on MeanDecreaseAccuracy to display in descending order
ImpData2$Var.Names <- factor(ImpData2$Var.Names, levels = ImpData2$Var.Names[order(ImpData2$MeanDecreaseAccuracy, decreasing = FALSE)])
ggplot(ImpData2, aes(x=Var.Names, y=MeanDecreaseAccuracy)) +
geom_segment(aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDecreaseAccuracy),
color="skyblue",
size = 2
) +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Variable importance
ImpData2 <- as.data.frame(importance(rf_model2))
ImpData2$Var.Names <- row.names(ImpData2)
#reorder variables based on MeanDecreaseAccuracy to display in descending order
ImpData2$Var.Names <- factor(ImpData2$Var.Names, levels = ImpData2$Var.Names[order(ImpData2$MeanDecreaseAccuracy, decreasing = FALSE)])
ggplot(ImpData2, aes(x=Var.Names, y=MeanDecreaseAccuracy)) +
geom_segment(aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDecreaseAccuracy),
color="skyblue",
size = 2
) +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
#reorder variables based on MeanDecreaseGini to display in descending order
ImpData2$Var.Names2 <-
factor(ImpData2$Var.Names,
levels = ImpData2$Var.Names[order(ImpData2$MeanDecreaseGini,
decreasing = FALSE)])
ggplot(ImpData2, aes(x=Var.Names2, y=MeanDecreaseGini)) +
geom_segment(aes(x=Var.Names2, xend=Var.Names2, y=0, yend=MeanDecreaseGini),
color="skyblue",
size = 2
) +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
#reorder variables based on MeanDecreaseGini to display in descending order
ImpData$Var.Names2 <- factor(ImpData$Var.Names, levels = ImpData$Var.Names[order(ImpData$MeanDecreaseGini, decreasing = FALSE)])
ggplot(ImpData, aes(x=Var.Names2, y=MeanDecreaseGini)) +
geom_segment(aes(x=Var.Names2, xend=Var.Names2, y=0, yend=MeanDecreaseGini),
color="skyblue",
size = 2) +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
# Variable importance
#varImpPlot(rf_model)
ImpData <- as.data.frame(importance(rf_model))
ImpData$Var.Names <- row.names(ImpData)
#reorder variables based on MeanDecreaseAccuracy to display in descending order
ImpData$Var.Names <-
factor(ImpData$Var.Names,
levels = ImpData$Var.Names[order(ImpData$MeanDecreaseAccuracy,
decreasing = FALSE)])
ggplot(ImpData, aes(x=Var.Names, y=MeanDecreaseAccuracy)) +
geom_segment(aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDecreaseAccuracy),
color="skyblue",
size = 2
) +
#geom_point(aes(size = IncNodePurity), color="steelblue", alpha=1) +
theme_light() +
coord_flip() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
